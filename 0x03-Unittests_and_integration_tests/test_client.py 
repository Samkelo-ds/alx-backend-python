#!/usr/bin/env python3
import unittest
from unittest.mock import patch
from parameterized import parameterized
from client import GithubOrgClient


class TestGithubOrgClient(unittest.TestCase):
    @parameterized.expand([
        ("google",),
        ("abc",)
    ])
    @patch('utils.get_json')  # Patch where get_json is actually imported from
    def test_org(self, org_name, mock_get_json):
        # Setup the mock to return a dict with login: org_name
        mock_get_json.return_value = {"login": org_name}

        # Create an instance of GithubOrgClient with the org_name
        client = GithubOrgClient(org_name)

        # Call the org property (this should call get_json internally)
        result = client.org

        # Assert get_json was called exactly once with the correct URL
        mock_get_json.assert_called_once_with(f"https://api.github.com/orgs/{org_name}")

        # Assert the result is as expected
        self.assertEqual(result, {"login": org_name})


if __name__ == "__main__":
    unittest.main()

